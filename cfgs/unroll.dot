digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x137df10 [shape=record,label="{entry:\l  %call = call i32 @gettimeofday(%struct.timeval* @t_start, %struct.timezone* null) nounwind\l  br label %for.cond\l}"];
	Node0x137df10 -> Node0x137df70;
	Node0x137df70 [shape=record,label="{for.cond:                                         \l  %a.0 = phi i32 [ 0, %entry ], [ %add2, %for.inc_copy ], [ %add3_copy, %for.inc_copy2 ]\l  %i.0 = phi i32 [ 1, %entry ], [ %add4_copy, %for.inc_copy ], [ %add4_copy3, %for.inc_copy2 ]\l  %cmp = icmp sle i32 %i.0, 30000\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x137df70:s0 -> Node0x137dfd0;
	Node0x137df70:s1 -> Node0x137b160;
	Node0x137dfd0 [shape=record,label="{for.body:                                         \l  %add = add nsw i32 %a.0, %i.0\l  %rem = srem i32 %add, 10\l  %cmp1 = icmp eq i32 %rem, 0\l  br i1 %cmp1, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x137dfd0:s0 -> Node0x137e030;
	Node0x137dfd0:s1 -> Node0x137e090;
	Node0x137e030 [shape=record,label="{if.then:                                          \l  %a.1 = phi i32 [ %add, %for.body ], [ %add_copy, %for.body_copy ]\l  %i.1 = phi i32 [ %i.0, %for.body ], [ %add4, %for.body_copy ]\l  %add2 = add nsw i32 %a.1, 3\l  br label %if.end_copy\l}"];
	Node0x137e030 -> Node0x137b1c0;
	Node0x137e090 [shape=record,label="{if.else:                                          \l  %add3 = add nsw i32 %add, 5\l  br label %if.end\l}"];
	Node0x137e090 -> Node0x137e0f0;
	Node0x137e0f0 [shape=record,label="{if.end:                                           \l  br label %for.inc\l}"];
	Node0x137e0f0 -> Node0x137b100;
	Node0x137b100 [shape=record,label="{for.inc:                                          \l  %add4 = add nsw i32 %i.0, 2\l  br label %for.cond_copy\l}"];
	Node0x137b100 -> Node0x137b280;
	Node0x137b160 [shape=record,label="{for.end:                                          \l  %a.2 = phi i32 [ %add3, %for.cond_copy ], [ %a.0, %for.cond ]\l  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %a.2)\l  %call6 = call i32 @gettimeofday(%struct.timeval* @t_end, %struct.timezone* null) nounwind\l  %0 = load i64* getelementptr inbounds (%struct.timeval* @t_end, i32 0, i32 0), align 8\l  %1 = load i64* getelementptr inbounds (%struct.timeval* @t_start, i32 0, i32 0), align 8\l  %sub = sub nsw i64 %0, %1\l  %conv = sitofp i64 %sub to double\l  %2 = load i64* getelementptr inbounds (%struct.timeval* @t_end, i32 0, i32 1), align 8\l  %3 = load i64* getelementptr inbounds (%struct.timeval* @t_start, i32 0, i32 1), align 8\l  %sub7 = sub nsw i64 %2, %3\l  %conv8 = sitofp i64 %sub7 to double\l  %div = fdiv double %conv8, 1.000000e+06\l  %add9 = fadd double %conv, %div\l  store double %add9, double* @t_diff, align 8\l  %4 = load double* @t_diff, align 8\l  %call10 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str1, i32 0, i32 0), double %4)\l  ret i32 %a.2\l}"];
	Node0x137b1c0 [shape=record,label="{if.end_copy:                                      \l  br label %for.inc_copy\l}"];
	Node0x137b1c0 -> Node0x137b220;
	Node0x137b220 [shape=record,label="{for.inc_copy:                                     \l  %add4_copy = add nsw i32 %i.1, 2\l  br label %for.cond\l}"];
	Node0x137b220 -> Node0x137df70;
	Node0x137b280 [shape=record,label="{for.cond_copy:                                    \l  %cmp_copy = icmp sle i32 %add4, 30000\l  br i1 %cmp_copy, label %for.body_copy, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x137b280:s0 -> Node0x137b2e0;
	Node0x137b280:s1 -> Node0x137b160;
	Node0x137b2e0 [shape=record,label="{for.body_copy:                                    \l  %add_copy = add nsw i32 %add3, %add4\l  %rem_copy = srem i32 %add_copy, 10\l  %cmp1_copy = icmp eq i32 %rem_copy, 0\l  br i1 %cmp1_copy, label %if.then, label %if.else_copy\l|{<s0>T|<s1>F}}"];
	Node0x137b2e0:s0 -> Node0x137e030;
	Node0x137b2e0:s1 -> Node0x137b340;
	Node0x137b340 [shape=record,label="{if.else_copy:                                     \l  %add3_copy = add nsw i32 %add_copy, 5\l  br label %if.end_copy1\l}"];
	Node0x137b340 -> Node0x137b3a0;
	Node0x137b3a0 [shape=record,label="{if.end_copy1:                                     \l  br label %for.inc_copy2\l}"];
	Node0x137b3a0 -> Node0x137b400;
	Node0x137b400 [shape=record,label="{for.inc_copy2:                                    \l  %add4_copy3 = add nsw i32 %add4, 2\l  br label %for.cond\l}"];
	Node0x137b400 -> Node0x137df70;
}
