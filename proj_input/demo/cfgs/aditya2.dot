digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x1fc9fc0 [shape=record,label="{entry:\l  %call = call i32 @gettimeofday(%struct.timeval* @t_start, %struct.timezone* null) nounwind\l  %induction = alloca i32\l  store i32 1, i32* %induction\l  %induction1 = alloca i32\l  store i32 3, i32* %induction1\l  %flag = alloca i1\l  store i1 false, i1* %flag\l  br label %for.cond\l}"];
	Node0x1fc9fc0 -> Node0x1fca020;
	Node0x1fca020 [shape=record,label="{for.cond:                                         \l  %a.0 = phi i32 [ 0, %entry ], [ %add2, %for.inc_copy ], [ %add3_copy, %for.inc_copy2 ], [ %add2, %for.inc_copy_copy ]\l  %0 = load i32* %induction\l  %cmp = icmp sle i32 %0, 30000\l  store i1 false, i1* %flag\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x1fca020:s0 -> Node0x1fca080;
	Node0x1fca020:s1 -> Node0x1fc7200;
	Node0x1fca080 [shape=record,label="{for.body:                                         \l  %add = add nsw i32 %a.0, %0\l  %rem = srem i32 %add, 10\l  %cmp1 = icmp eq i32 %rem, 0\l  br i1 %cmp1, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x1fca080:s0 -> Node0x1fca0e0;
	Node0x1fca080:s1 -> Node0x1fca140;
	Node0x1fca0e0 [shape=record,label="{if.then:                                          \l  %a.1 = phi i32 [ %add, %for.body ], [ %add_copy, %for.body_copy ]\l  %i.1 = phi i32 [ %7, %for.body_copy ], [ %0, %for.body ]\l  %add2 = add nsw i32 %a.1, 3\l  br label %if.end_copy\l}"];
	Node0x1fca0e0 -> Node0x1fc7260;
	Node0x1fca140 [shape=record,label="{if.else:                                          \l  %add3 = add nsw i32 %add, 5\l  br label %if.end\l}"];
	Node0x1fca140 -> Node0x1fca1a0;
	Node0x1fca1a0 [shape=record,label="{if.end:                                           \l  br label %for.inc\l}"];
	Node0x1fca1a0 -> Node0x1fc71a0;
	Node0x1fc71a0 [shape=record,label="{for.inc:                                          \l  %add4 = add nsw i32 %0, 4\l  store i32 %add4, i32* %induction\l  store i1 true, i1* %flag\l  br label %for.cond_copy\l}"];
	Node0x1fc71a0 -> Node0x1fc7320;
	Node0x1fc7200 [shape=record,label="{for.end:                                          \l  %a.2 = phi i32 [ %add3, %for.cond_copy ], [ %a.0, %for.cond ]\l  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %a.2)\l  %call6 = call i32 @gettimeofday(%struct.timeval* @t_end, %struct.timezone* null) nounwind\l  %1 = load i64* getelementptr inbounds (%struct.timeval* @t_end, i32 0, i32 0), align 8\l  %2 = load i64* getelementptr inbounds (%struct.timeval* @t_start, i32 0, i32 0), align 8\l  %sub = sub nsw i64 %1, %2\l  %conv = sitofp i64 %sub to double\l  %3 = load i64* getelementptr inbounds (%struct.timeval* @t_end, i32 0, i32 1), align 8\l  %4 = load i64* getelementptr inbounds (%struct.timeval* @t_start, i32 0, i32 1), align 8\l  %sub7 = sub nsw i64 %3, %4\l  %conv8 = sitofp i64 %sub7 to double\l  %div = fdiv double %conv8, 1.000000e+06\l  %add9 = fadd double %conv, %div\l  store double %add9, double* @t_diff, align 8\l  %5 = load double* @t_diff, align 8\l  %call10 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str1, i32 0, i32 0), double %5)\l  ret i32 %a.2\l}"];
	Node0x1fc7260 [shape=record,label="{if.end_copy:                                      \l  %6 = load i1* %flag\l  br i1 %6, label %for.inc_copy, label %for.inc_copy_copy\l|{<s0>T|<s1>F}}"];
	Node0x1fc7260:s0 -> Node0x1fc72c0;
	Node0x1fc7260:s1 -> Node0x1fc7500;
	Node0x1fc72c0 [shape=record,label="{for.inc_copy:                                     \l  %add4_copy = add nsw i32 %i.1, 4\l  store i32 %add4_copy, i32* %induction1\l  br label %for.cond\l}"];
	Node0x1fc72c0 -> Node0x1fca020;
	Node0x1fc7320 [shape=record,label="{for.cond_copy:                                    \l  %7 = load i32* %induction1\l  %cmp_copy = icmp sle i32 %7, 30000\l  br i1 %cmp_copy, label %for.body_copy, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x1fc7320:s0 -> Node0x1fc7380;
	Node0x1fc7320:s1 -> Node0x1fc7200;
	Node0x1fc7380 [shape=record,label="{for.body_copy:                                    \l  %add_copy = add nsw i32 %add3, %7\l  %rem_copy = srem i32 %add_copy, 10\l  %cmp1_copy = icmp eq i32 %rem_copy, 0\l  br i1 %cmp1_copy, label %if.then, label %if.else_copy\l|{<s0>T|<s1>F}}"];
	Node0x1fc7380:s0 -> Node0x1fca0e0;
	Node0x1fc7380:s1 -> Node0x1fc73e0;
	Node0x1fc73e0 [shape=record,label="{if.else_copy:                                     \l  %add3_copy = add nsw i32 %add_copy, 5\l  br label %if.end_copy1\l}"];
	Node0x1fc73e0 -> Node0x1fc7440;
	Node0x1fc7440 [shape=record,label="{if.end_copy1:                                     \l  br label %for.inc_copy2\l}"];
	Node0x1fc7440 -> Node0x1fc74a0;
	Node0x1fc74a0 [shape=record,label="{for.inc_copy2:                                    \l  %add4_copy3 = add nsw i32 %7, 4\l  store i32 %add4_copy3, i32* %induction1\l  br label %for.cond\l}"];
	Node0x1fc74a0 -> Node0x1fca020;
	Node0x1fc7500 [shape=record,label="{for.inc_copy_copy:                                \l  %add4_copy_copy = add nsw i32 %i.1, 2\l  store i32 %add4_copy_copy, i32* %induction1\l  %8 = load i32* %induction\l  %9 = add nsw i32 %8, 2\l  store i32 %8, i32* %induction\l  br label %for.cond\l}"];
	Node0x1fc7500 -> Node0x1fca020;
}
