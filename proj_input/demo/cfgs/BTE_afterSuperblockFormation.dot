digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x19bdc50 [shape=record,label="{entry:\l  br label %for.cond\l}"];
	Node0x19bdc50 -> Node0x19bdcb0;
	Node0x19bdcb0 [shape=record,label="{for.cond:                                         \l  %i.0 = phi i32 [ 0, %entry ], [ %inc_copy, %for.inc_copy ]\l  %cmp = icmp slt i32 %i.0, 100\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x19bdcb0:s0 -> Node0x19bcd30;
	Node0x19bdcb0:s1 -> Node0x19bcdf0;
	Node0x19bcd30 [shape=record,label="{for.body:                                         \l  %idxprom = sext i32 %i.0 to i64\l  %arrayidx = getelementptr inbounds [100 x i32]* @a, i32 0, i64 %idxprom\l  store i32 %i.0, i32* %arrayidx, align 4\l  br label %for.inc\l}"];
	Node0x19bcd30 -> Node0x19bcd90;
	Node0x19bcd90 [shape=record,label="{for.inc:                                          \l  %inc = add nsw i32 %i.0, 1\l  br label %for.cond_copy\l}"];
	Node0x19bcd90 -> Node0x19ba2c0;
	Node0x19bcdf0 [shape=record,label="{for.end:                                          \l  br label %for.cond1\l}"];
	Node0x19bcdf0 -> Node0x19bce50;
	Node0x19bce50 [shape=record,label="{for.cond1:                                        \l  %i.1 = phi i32 [ 0, %for.end ], [ %inc10_copy, %for.inc9_copy ], [ %inc10_copy5, %for.inc9_copy4 ]\l  %cmp2 = icmp slt i32 %i.1, 100\l  br i1 %cmp2, label %for.body3, label %for.end11\l|{<s0>T|<s1>F}}"];
	Node0x19bce50:s0 -> Node0x19bceb0;
	Node0x19bce50:s1 -> Node0x19ba1a0;
	Node0x19bceb0 [shape=record,label="{for.body3:                                        \l  %cmp4 = icmp sgt i32 %i.1, 999\l  br i1 %cmp4, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x19bceb0:s0 -> Node0x19bcf10;
	Node0x19bceb0:s1 -> Node0x19ba0e0;
	Node0x19bcf10 [shape=record,label="{if.then:                                          \l  %i.2 = phi i32 [ %i.1, %for.body3 ], [ %inc10, %for.body3_copy ]\l  %add = add nsw i32 %i.2, 1\l  %idxprom5 = sext i32 %add to i64\l  %arrayidx6 = getelementptr inbounds [100 x i32]* @a, i32 0, i64 %idxprom5\l  store i32 1, i32* %arrayidx6, align 4\l  br label %if.end_copy\l}"];
	Node0x19bcf10 -> Node0x19ba200;
	Node0x19ba0e0 [shape=record,label="{if.end:                                           \l  %0 = load i32* getelementptr inbounds ([100 x i32]* @a, i32 0, i64 97), align 4\l  %idxprom7 = sext i32 %i.1 to i64\l  %arrayidx8 = getelementptr inbounds [100 x i32]* @b, i32 0, i64 %idxprom7\l  store i32 %0, i32* %arrayidx8, align 4\l  br label %for.inc9\l}"];
	Node0x19ba0e0 -> Node0x19ba140;
	Node0x19ba140 [shape=record,label="{for.inc9:                                         \l  %inc10 = add nsw i32 %i.1, 1\l  br label %for.cond1_copy\l}"];
	Node0x19ba140 -> Node0x19ba3e0;
	Node0x19ba1a0 [shape=record,label="{for.end11:                                        \l  %1 = load i32* getelementptr inbounds ([100 x i32]* @b, i32 0, i64 97), align 4\l  %2 = load i32* getelementptr inbounds ([100 x i32]* @b, i32 0, i64 98), align 4\l  %3 = load i32* getelementptr inbounds ([100 x i32]* @b, i32 0, i64 99), align 4\l  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2, i32 %3)\l  ret i32 0\l}"];
	Node0x19ba200 [shape=record,label="{if.end_copy:                                      \l  %4 = load i32* getelementptr inbounds ([100 x i32]* @a, i32 0, i64 97), align 4\l  %idxprom7_copy = sext i32 %i.2 to i64\l  %arrayidx8_copy = getelementptr inbounds [100 x i32]* @b, i32 0, i64 %idxprom7_copy\l  store i32 %4, i32* %arrayidx8_copy, align 4\l  br label %for.inc9_copy\l}"];
	Node0x19ba200 -> Node0x19ba260;
	Node0x19ba260 [shape=record,label="{for.inc9_copy:                                    \l  %inc10_copy = add nsw i32 %i.2, 1\l  br label %for.cond1\l}"];
	Node0x19ba260 -> Node0x19bce50;
	Node0x19ba2c0 [shape=record,label="{for.cond_copy:                                    \l  %cmp_copy = icmp slt i32 %inc, 100\l  br i1 %cmp_copy, label %for.body_copy, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x19ba2c0:s0 -> Node0x19ba320;
	Node0x19ba2c0:s1 -> Node0x19bcdf0;
	Node0x19ba320 [shape=record,label="{for.body_copy:                                    \l  %idxprom_copy = sext i32 %inc to i64\l  %arrayidx_copy = getelementptr inbounds [100 x i32]* @a, i32 0, i64 %idxprom_copy\l  store i32 %inc, i32* %arrayidx_copy, align 4\l  br label %for.inc_copy\l}"];
	Node0x19ba320 -> Node0x19ba380;
	Node0x19ba380 [shape=record,label="{for.inc_copy:                                     \l  %inc_copy = add nsw i32 %inc, 1\l  br label %for.cond\l}"];
	Node0x19ba380 -> Node0x19bdcb0;
	Node0x19ba3e0 [shape=record,label="{for.cond1_copy:                                   \l  %cmp2_copy = icmp slt i32 %inc10, 100\l  br i1 %cmp2_copy, label %for.body3_copy, label %for.end11\l|{<s0>T|<s1>F}}"];
	Node0x19ba3e0:s0 -> Node0x19ba440;
	Node0x19ba3e0:s1 -> Node0x19ba1a0;
	Node0x19ba440 [shape=record,label="{for.body3_copy:                                   \l  %cmp4_copy = icmp sgt i32 %inc10, 999\l  br i1 %cmp4_copy, label %if.then, label %if.end_copy1\l|{<s0>T|<s1>F}}"];
	Node0x19ba440:s0 -> Node0x19bcf10;
	Node0x19ba440:s1 -> Node0x19ba4a0;
	Node0x19ba4a0 [shape=record,label="{if.end_copy1:                                     \l  %5 = load i32* getelementptr inbounds ([100 x i32]* @a, i32 0, i64 97), align 4\l  %idxprom7_copy2 = sext i32 %inc10 to i64\l  %arrayidx8_copy3 = getelementptr inbounds [100 x i32]* @b, i32 0, i64 %idxprom7_copy2\l  store i32 %5, i32* %arrayidx8_copy3, align 4\l  br label %for.inc9_copy4\l}"];
	Node0x19ba4a0 -> Node0x19ba500;
	Node0x19ba500 [shape=record,label="{for.inc9_copy4:                                   \l  %inc10_copy5 = add nsw i32 %inc10, 1\l  br label %for.cond1\l}"];
	Node0x19ba500 -> Node0x19bce50;
}
